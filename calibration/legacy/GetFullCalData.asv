
nSteps = 64; %StepperCal = 64, RGB950 = 40
LambdaList = [450, 540, 570, 630, 650, 670];
nLambda = length(LambdaList);

%image size. Needs to be more robust.
testimsz_1 = 1500;
testimsz_2 = 1500;

%%
%Calibration file path
calibrationFilePath = 'D:\Measurements\Air_Calibrations\New_Diffuser\AirCalibration-06-Dec-2020.h5';
testFilePath = 'D:\Measurements\Air_Calibrations\New_Diffuser\Dichroic45-07-Dec-2020.h5';
%%
for ii = 1:length(LambdaList) %for loading all lambda(s)
%Get h5 reference data
    Lambda = LambdaList(ii);
    refVecs(ii,:) = NormalizedReferenceData(calibrationFilePath,Lambda,nSteps);
%Grab measured data from h5 file
    meanfulldata(ii,:,:,:) = ReadCalImages(calibrationFilePath,Lambda,refVecs(ii,:),nSteps);
%     meandatanoref(ii,:,:,:) = ReadDataImagesNoRef(calibrationFilePath,Lambda,nSteps);
%Grab measured data from h5 file
%     meanfulldata(ii,:,:,:) = ReadDataImagesNoRef(calibrationFilePath,Lambda,nSteps);
%     meanfulldata(ii,:,:,:) = ReadFullCalImages(calibrationFilePath,Lambda,refVecs,nSteps); %needs to use dark field correction code at some point

end

%%
clc;
mx = max(meanfulldata,[],'all');
%Get amount of pixels
PixelCount = length(meanfulldata(1,1,:));

%AirCalRoutine_MKedit2(Amp,PSG_delta,PSG_theta,PSA_delta,PSA_theta,PSA_LP,nSteps)
func = @(fitvals, inpvals) AirCalRoutine_MKeditAmpCal(fitvals,inpvals(1),inpvals(2),inpvals(3),inpvals(4),inpvals(5),inpvals(6));

%Set bounds and known values, likely not optimal ask Meredith
lb = 0;%zeros(1,PixelCount*nLambda);
ub = 3*mx;%*ones(1,PixelCount*nLambda);

%Starting fit guess
fitguess = mx;%*ones(sqrt(PixelCount),sqrt(PixelCount));
%%

%constant across Lambda
DelRad_g = -0.1825;
DelRad_a = -0.0203;
LP_Rad = -0.0610;


dg_rad = [2.32821491720789,2.27923088133178,2.22232304280817,2.17410616636198,2.13309067300460,2.08198339906172,2.03090094594950,1.98507651881251,1.94578326429503,1.90544610463194,1.87293511987322,1.83200282613381,1.79245046412239,1.76172910227583,1.73727986513025,1.70695826521702,1.68115704522444,1.65592990218593,1.63405542419882,1.59480380716638,1.59024913139111,1.55487026365334,1.53312571366529,1.52411297116052,1.49549773451957,1.48652107775223,1.45656538537525,1.44059443821981,1.41146637680512,1.39566454487169,1.36910002336742];
da_rad = [2.21508374156057,2.16956964041893,2.12900440198022,2.09058916286353,2.04957236778996,2.00464758675349,1.96036373992076,1.92239496140048,1.88570322785251,1.85007659839389,1.81971725700290,1.78187920325098,1.74589814435504,1.71631647898904,1.69237436610493,1.66448524608816,1.63847463328053,1.61426210116849,1.59324181399593,1.55519471336503,1.54936618329363,1.51539823118199,1.49384390495641,1.48502994775830,1.45652115908295,1.44694983689127,1.41930418343572,1.40380613905006,1.37684807652435,1.36337808695621,1.33839227147499];

dg_rad_full = [dg_rad(1),dg_rad(10),dg_rad(13),dg_rad(19),dg_rad(21), dg_rad(23)];
da_rad_full = [da_rad(1),da_rad(10),da_rad(13),da_rad(19),da_rad(21), da_rad(23)];

dg_rad_full = dg_rad(1);
da_rad_full = da_rad(1);
%% Matrix Mult. (Does not work, lack of memory)
%Least squares curve fitting and storing into caldata
%Will only work for square images atm
tic
clear ampcaldata
ampcaldata = zeros(nLambda,sqrt(PixelCount),sqrt(PixelCount));
for n = 1:nLambda
    inputvec = [dg_rad_full, DelRad_g, da_rad_full, DelRad_a, LP_Rad, nSteps];
    [fits, res] = lsqcurvefit(func, fitguess, inputvec, meanfulldata(n,:,:,:),lb,ub);
    ampcaldata(:) = fits(:);
end
f = msgbox('Operation Completed');
% load handel
toc
% sound(y,Fs)
%% Pixel by Pixel (This one is only one that works right now)
%Least squares curve fitting and storing into caldata
%Will only work for square images atm
tic
clear ampcaldata
ampcaldata = zeros(nLambda,sqrt(PixelCount),sqrt(PixelCount));
for n = 1:nLambda
    inputvec = [dg_rad(n), DelRad_g, da_rad(n), DelRad_a, LP_Rad, nSteps];
    for ii = 1:length(1:sqrt(PixelCount))
        for jj = 1:length(1:sqrt(PixelCount))
            [fits,resnorm,res] = lsqcurvefit(func, fitguess, inputvec, meanfulldata(n,:,ii,jj),lb,ub);
            ampcaldata(n,ii,jj) = fits;
            RMSE_var(n,ii,jj,:) = std(res(:));
        end
    end
end
toc

load handel
sound(y,Fs)
% caldata(:)=fits(:);
%%

imagesc(squeeze(ampcaldata(1,:,:)));colorbar;
title('Amplitude fit Lambda = 450 nm')

%%
%RMSE of data
for ii = 1:nLambda
RMSE_var(ii) = std(res(ii,:)); %will need to fix size (1 x nLambda)
end

%Grab caldata for tables, plotting, and psgMM/psaMM
%Create table in radians
% Amp = caldata(1:PixelCount*nLambda);
% dg_rad = caldata(PixelCount*nLambda+1:PixelCount*nLambda+nLambda); %change range
% DelRad_g = caldata(PixelCount*nLambda+1+nLambda);
% da_rad = caldata(PixelCount*nLambda+2+nLambda:PixelCount*nLambda+1+2*nLambda); %change range
% DelRad_a = caldata(PixelCount*nLambda+2+2*nLambda);
% LP_Rad = caldata(PixelCount*nLambda+3+2*nLambda);

%plot lambda vs del_a and del_g
%plot Amplitude vs meas# for nLambda
%print Theta_LP,PSA,PSG


ThetaMotorGen = (0:nSteps-1)*2*pi/nSteps; 
%%
figure(1)
plot(LambdaList,dg_rad)
title('\delta_{g} radians');
figure(2)
plot(LambdaList,da_rad)
title('\delta_{a} radians');
%%
figure(3)
errorbar(LambdaList,RMSE_var);
title('RMSE vs Lambda');
%%
%Plot Data
figure(4)
hold on;
plot(ThetaMotorGen,mean(squeeze(meandata(1,:,:,:)),[2,3]),'*r'); 
Irrad = AirCalRoutine_MKeditLSQ(ampcaldata,dg_rad_full,DelRad_g,da_rad_full,DelRad_a,LP_Rad, 256);

%Plot fit
range = linspace(0,2*pi,256);
plot(range,mean(squeeze(Irrad(1,:,:,:)),[2,3]));%,'color',cRGB);
title(['Lambda =  ' num2str(LambdaList(4))]);
xlabel('PSG Rotation (Radians)')
ylabel('Camera Counts')

%Create table in degrees
dg_deg = dg_rad.*180/pi;
DelDeg_g = DelRad_g.*180/pi;
da_deg = da_rad.*180/pi;
DelDeg_a = DelRad_a.*180/pi;
LP_Deg = LP_Rad.*180/pi;

toc
%%
Avg_Amplitude = mean(Amp,'all');
RMSE = RMSE_var;


T = table(LambdaList,Avg_Amplitude,dg_rad, DelRad_g, da_rad, DelRad_a, LP_Rad, RMSE)

% Avg_delta_g = mean(dg_deg,'all');
% Avg_Theta_g = mean(DelDeg_g,'all');
% Avg_delta_a = mean(da_deg,'all');
% Avg_Theta_a = mean(DelDeg_a,'all');
% Avg_LP_Theta = mean(LP_Deg,'all');

T = table(LambdaList,Avg_Amplitude,dg_deg, DelDeg_g, da_deg, DelDeg_a, LP_Deg, RMSE)
% 
% figure(2)
% imagesc(reshape(Amp,5,5));colormap(gca,'parula');hcb1=colorbar;
% sgtitle(['Amplitude ' num2str(Lambda) 'nm']

%%

tic
[~,W] = AirCalRoutine_MKedit2(ampcaldata,dg_rad_full,DelRad_g,da_rad_full,DelRad_a,LP_Rad,nSteps);
toc

% W = AirCalRoutine_MKeditAmpCalW(ampcaldata,dg_rad_full,DelRad_g,da_rad_full,DelRad_a,LP_Rad,nSteps);
%% Image data

for ii = 1:length(LambdaList) %for loading all lambda(s)
%Get h5 reference data
    Lambda = LambdaList(ii);
    [~,~,refVecsImgs(ii,:)] = load_refdata(testFilePath,Lambda,nSteps);
%     [~, ROIimg(ii,:,:,:)] = ReadDataImages(testFilePath, Lambda,refVecsImgs(ii,:),nSteps);
    imgdata(ii,:,:,:) = ReadDataImages(testFilePath, Lambda,refVecsImgs(ii,:),nSteps);
% save('dichroic_575_45','imgdata','ROIimg');
end


%%
ROI = 1500;
tic
% nLambda=length(Lambda);
% M = zeros(nLambda,16,ROI*ROI);
clear M
for n = 1:nLambda
    Winv = pinv(squeeze(W(1,:,:)));
    M(n,:,:) = Winv*(reshape(squeeze(imgdata(n,:,:,:)),nSteps,ROI*ROI)./repmat(ampcaldata(n,:),[nSteps 1]));
end
toc

%%
clear mmVecs
for n = 1:nLambda
    mmVecs(n,:,:,:) = reshape(squeeze(M(n,:,:)),16,ROI,ROI);
end

%%
filename = "test45";
DisplayMM(mmVecs,nLambda,LambdaList,filename)
